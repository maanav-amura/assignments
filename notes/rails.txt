=> MVC Architecture

Model (Library : ActiveRecord) - handles data, objects in the database
View  (Library : ActionView) - handles presentation, presentation(html, css, js)
Controller (Library : ActionController) - handles decision, events

=> Create rails project - rails new simple_cms -d mysql

Inside gem file, keep only required gems and remove all others and then run bundle install to configure dependencies i.e. bundle install
configure config/database.yml for database


=> Generate controller and view
rails generate controller demo index

=> Routes

Simple: get "demo/index"

Full:
match "demo/index"
	:to => "demo#index",
	:via => :get

Default route is based on :controller/:action/:id
Default routes -
match ':controller(/:action(/:id))', :via => :get

=> Render

To render a particular page for a controller's action use, e.g. in demo controller render view hello for index
def index
 #  render(:template => 'demo/hello')
 #  render('demo/hello')
    render('hello')
end

 def hello
    # If to render same view no need to explicitly mention render as render('hello')
 end

=> Redirection
  def other_hello
    # access as localhost:3000/other_hello
    # redirect_to(:controller => 'demo', :action=> 'index')
    redirect_to(:action=> 'index') # default controller
  end
  def google
    redirect_to('http://www.google.co.in')
  end

=> Embedded Ruby(erb)
process the text - <% %>
outputs the value it returns inside it  - <%= %>

=> To transfer data from controller to view, we use exclusively INSTANCE VARIABLES

demo_controller.rb
	 def hello
	   @array = [1,2,3,4,5]
	  end
hello.html.erb
	<% @array.each do |a| %>
	<br> <%= a %>
	<% end %>

=> HTML Links

<a href="/demo/index"> Index </a>
<%= link_to(text, target) %>
eg.	<%= link_to("Hello", {:controller => 'demo', :action => 'hello'}) %>
	<%= link_to("Hello", {:action => 'hello'}) %> # since demo is default controller

link_to helps to reduce url link to root as it has access to routes instead of full path,
hence displayed as 'localhost:3000' instead of 'localhost:3000/demo/index' just like redirect

=> URL parameters

Access as params[:id] or params['id']
In index.html.erb => <%= link_to("Hello with parameters", {:action => 'hello', :id => 10, :page => 'hello'}) %>
In demo_ontroller.rb => @id = params[:id]; @page = params['page']
In hello.html.erb => <%= @id %> <%= @page %> [Outputs => 10 hello]
Url changed as = 10?page=hello, before '?' its id as id is special and after ? are the other params
and ignores the instance variable when no params are passed

We can inspect the params present on page using '<%= params.inspect %>' in html.erb

=> Environments

Development : For developing the product
Production : When the application goes live, its put on the live server for public to use
Test : To test application and databases, without changing development or production Environments
We can also add any other Environments

=> Database

database -> table -> row -> column -> field
index, foreign keys(mostly indexed), schema, CRUD

Commands -
show databases;
create database simple_cms_development;
use simple_cms_development;

- grant all privileges on db_name.*
  to 'username'@'localhost'
  identified by 'password';
- show grants for 'username'@'localhost;'

mysql> GRANT ALL PRIVILEGES ON simple_cms_development.*
    -> TO 'simple_cms'@'localhost'
    -> IDENTIFIED BY 'amura@123';
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql> SHOW GRANTS FOR 'simple_cms'@'localhost';
+--------------------------------------------------------------------------------+
| Grants for simple_cms@localhost                                                |
+--------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO 'simple_cms'@'localhost'                                 |
| GRANT ALL PRIVILEGES ON `simple_cms_development`.* TO 'simple_cms'@'localhost' |
+--------------------------------------------------------------------------------+

To logon directly with created user - mysql -u simple_cms -p simple_cms_development

=> rake = "Ruby make"

To connect and dump schema details to mysql:
$ rake db:schema:dump
$ rake -T     # returns all task available by rake
$ rake -T db for only db tasks
$ rake db:schema:dump RAILS_ENV=production    # for other environments

=> Migrations
- allows sharing schema change
- helps with vesion control
- allows different users to keep their database in sync
- writing in ruby instead of SQL

Generate Migrations
$ rails generate migration InitMigrations

Generate model
$ rails generate model User
      Model name is singular
      Database name is plural

application_controller < ActionController :: Base
application_record < ActiveRecord::Base

Migrations

db/migrate/init.rb

  class Init < ActiveRecord::Migration[5.1]
    def change

Model

db/migrate/20170822054430_create_subjects.rb
  class CreateSubjects < ActiveRecord::Migration[5.1]
    def change
      create_table :subjects do |t|

        t.timestamps
      end
    end
  end

app/models/subject.rb
  class Subject < ApplicationRecord

Create table inside migrations of model (create_users)
  create_table 'table' do |t|
    t.column 'name', :type, options
    t.type 'name', options

    t.timestamps    # created_at, updated_at
  end

Table column types = binary, boolean, date, datetime, decimal, float, integer, string, text, time
Table column options =
:limit => size
:default => false
:null => true/false
:precision => number
:scale => number

Once you have defined the create migrations use command '$ rake db:migrate' to migrate
and then schema is dumped into db/schema.rb

To revert back to initial migrations:
$ rake db:migrate VERSION=0

➜  simple_cms git:(master) ✗ rake db:migrate VERSION=0
== 20170821044937 InitMigrations: reverting ===================================
== 20170821044937 InitMigrations: reverted (0.0023s) ==========================

➜  simple_cms git:(master) ✗ rake db:migrate:status
 Status   Migration ID    Migration Name
--------------------------------------------------
  down    20170821044937  Init migrations
  down    20170821045157  Create users

  We can directly make use of version migrations specified in db:migrate:status

➜  simple_cms git:(master) ✗ rake db:migrate VERSION=20170821045157
== 20170821045157 CreateUsers: migrating ======================================

➜  simple_cms git:(master) ✗ rake db:migrate:status
 Status   Migration ID    Migration Name
--------------------------------------------------
   up     20170821044937  Init migrations
   up     20170821045157  Create users

TABLE MIGRATIONS METHOD

- create_table(table, options) do |t|
end
- drop_table(table)
rename_table(table, new_name)

COLUMN MIGRATIONS METHOD

add_column(table, column, type, options)
remove_column(table, column )
rename_column(table, column, new_name)
change_column(table, column, type, options)

INDEX MIGRATION METHOD

add_index (table, column/[array of columns] , options)  # option - :unique => true/false, :name => "custom_name"
remove_index(table, column)

$ rails generate migration AlterUsers

class AlterUsers < ActiveRecord::Migration[5.1]
  def up
    rename_table('users','admin_users')
    add_column('admin_users', 'username', :string, :limit=>25, :after => 'email')
    change_column('admin_users','email',:string, :limit => 100)
    rename_column('admin_users','password','hashed_password')
    puts 'Adding index username!'
    add_index('admin_users','username')
  end
  def down
    remove_index('admin_users','username')
    rename_column('admin_users','hashed_password','password')
    change_column('admin_users','email',:string, :default=>'', :null => false)
    remove_column('admin_users', 'username')
    rename_table('admin_users','users')
  end
end

➜  simple_cms git:(master) ✗ rake db:migrate
➜  simple_cms git:(master) ✗ rake db:migrate version=0
➜  simple_cms git:(master) ✗ rake db:migrate:status

database: simple_cms_development

 Status   Migration ID    Migration Name
--------------------------------------------------
   up     20170821044937  Init migrations
   up     20170821045157  Create users
   up     20170821052228  Alter users

Migration advice: if there is any error while migrating, solve it, and comment what was done already

Add foreign key is similar to add a normal key:
      t.integer 'subject_id'
      # same as : t.references :subject

self.table_name = 'admin_users' # To configure a differnet table in Model.rb

=> Records

user = User.new
user.first_name = ' '
user.save # Insert
user.last_name = ' '
user.save # Update
user.delete

user = User.where(:first_name => 'kevin')
users = users.order('last_name ASC').limit(5)
users = users.include(:articles_authored)

=> Rails console

CREATE

> subject = Subject.new({:name => 'Subject 1', :position => 1, :visible => 1})
2.4.0 :009 > subject.inspect
2.4.0 :010 > subject.new_record?
 => true
2.4.0 :011 > subject.save
 => true
2.4.0 :012 > subject.new_record?
 => false
2.4.0 :013 > subject.id
 => 1

Directly create, instantiate and save the subject :
> subject = Subject.create({:name=>'Subject 2',:position=>2,:visible=>true})

UPDATE

subject = Subject.find(1)
subject.visible = false
subject.save


subject = Subject.find(2)
subject.update_attributes(:visible => false, :position => 2)

DELETE

subject = Subject.find(1)
subject.destroy / subject.delete        # objects get frozen and thus cant be modified
subject.name  # Is allowed and will return name, can be used to return an object that it is deleted
subject.name = '' # will throw an error

FIND

- Primary key finder

Subject.find(2)   # either returns an object or error

- Dynamic key finder

Subject.find_by_id(1)   # returns object or nil
Subject.find_by_name('Subject 1')   # does not throw an error
Subject.all
Subject.first
Subject.last


CHECKING TYPE

Array ["name = ? AND visible = TRUE", "m" ]
Hash {:name => 'm', :visible => true}

FIND

Subject.where(['visible=?',false]).where({:name=>'Subject 1'}).first
Subject.order('name ASC')
Subject.order('name DESC')
Subject.limit(1)
Subject.offset(1)


LAMBDAS AS FUNCTIONS

In subject.rb
  # Access from Rails console :  Subject.visible or subject = Subject.search('Sub')

  scope :latest, -> { order('position DESC') }

  scope :visible, lambda { where(:visible => true) }
  scope :invisible, lambda { where(:visible => false )}
  scope :sorted, lambda { order('subjects.position ASC') }    # where subjects is the table name in SQL
  scope :newest_first, lambda { order('subjects.created_at DESC') }
  scope :search, lambda { |query|
    where(['name like ?',"%#{query}%"])
  }

=> Associations

ONE-TO-ONE

Subject.rb                # Provides subject.page as output
  has_one :page

Page.rb                   # Create pages should have a subject_id column to hold the subject
  belongs_to :subject

console:
subject = Subject.find(1)
first = Page.new({:name => 'Page 1', :permalink => 'first', :position => 1})
subject.page = first        <Page id: 1, subject_id: 1, .. >
subject.page.destroy # to remove the relationship

ONE-TO-MANY

Subject.rb                # Provides subject.pages as output
  has_many :pages

Page.rb                   # Create pages should have a subject_id column to hold the subject
  belongs_to :subject

console:
subject = Subject.find(1)
subject.pages
subject.pages << page
subject.pages = [page1,page2,..]
subject.pages.clear
subject.pages.destroy(page)
subject.pages.delete(page)
subject.pages.empty?
subject.pages.size

subject = Subject.find(1)
first = Page.new({:name => 'Page 1', :permalink => 1, :position => 1})
second = Page.new({:name => 'Page 2', :permalink => 2, :position => 2})
subject.pages << first
subject.pages << second
subject.pages = [first,second]
subject.pages.size => 2
subject.pages.empty? => false
subject.pages.delete(second)
subject.pages.size => 1
subject.pages.destroy(first)

MANY-TO-MANY

Create a Join table used as - FirstTablName_SecondTblName

$ rails generate migration CreateUsersPagesJoin

    create_table :users_pages, :id => false do |t|
      t.integer 'user_id'
      t.integer 'page_id'

class User < ApplicationRecord
  has_and_belongs_to_many :pages, :join_table => 'users_pages'

class Page < ApplicationRecord
  has_and_belongs_to_many :editors, :class_name => 'User', :join_table => 'users_pages'

Console:
page = Page.find(3)
me = User.create({:first_name=>'maanav',:last_name=>'shah',:email=>'m@g.c',:username=>'m',:hashed_password=>'ms'})
page.editors << me
page.editors.each {|e| puts e.first_name}

RICH MANY-TO-MANY

class CreateSectionEdits < ActiveRecord::Migration[5.1]
  def change
    create_table :section_edits do |t|
      t.references :user
      t.references :section
      t.string :summary
      t.timestamps
    end
    add_index :section_edits, ['user_id','section_id']

User.rb
  has_many :section_edits

class Section < ApplicationRecord
  has_many :section_edits

class SectionEdit < ApplicationRecord
  belongs_to :editor, :class_name => 'User', :foreign_key=>'user_id'
  belongs_to :section

Console

me = User.find(1)
me.section_edits
section = Section.create({:name=>'Section 1',:position=>1})
section.section_edits
edit = SectionEdit.new
section.section_edits << edit
edit.editor = me ;  edit.save  OR   me.section_edits << edit

OR

SectionEdit.create({:editor => me, :section => section, :summary=> 'sdfsdf'})

ACCESSING RICH JOINS

class User < ApplicationRecord
  has_many :section_edits
  has_many :sections, :through=> :section_edits

class Section < ApplicationRecord
  has_many :section_edits
  has_many :editor, :class_name => 'User', :through => :section_edits

class SectionEdit < ApplicationRecord
  belongs_to :editor, :class_name => 'User', :foreign_key=>'user_id'
  belongs_to :section
end

Console

section.section_edits.map {|se| se.editor}
  SectionEdit Load (0.4ms)  SELECT `section_edits`.* FROM `section_edits` WHERE `section_edits`.`section_id` = 1
  User Load (0.3ms)  SELECT  `admin_users`.* FROM `admin_users` WHERE `admin_users`.`id` = 1 LIMIT 1
 => [#<User id: 1, first_name: "maanav", last_name: "shah", email: "m@g.c", username: "m", hashed_password: "ms", created_at: "2017-08-21 09:55:55", updated_at: "2017-08-21 09:55:55">]
2.4.0 :015 >

=> CRUD

-index, show
- new, create
- edit, update
- delete, destroy
generate a form_for controller in .html.erb and rails will render it
in controller, create a new instance to pass default value and in action method perform the action and then redirect

=> Layouts

<%= yield %>

You can create your own layout_name.html.erb and to use ut, in controller add line -> layout 'layout_name'
You can keep flash notices inside a single layout

also in layout title you can add   <title>CMS | <%= @page_title || 'Admin' %></title>
and in html add  <% @page_title = 'Subject' %>

=> Partial

To keep code dry in html, create any html.erb with name preceding with underscore eg. _form.html.erb
in _form.html.erb add all repeating code

and in html add lines
<%= form_for(:subject, :url => {:action => 'update', :id => @subject.id} ) do |f| %>
  <%= render(:partial => 'form', :locals => {:f => f}) %>
  <%= submit_tag('Update Subject')%>
<% end %>
to render the repeating code in html file

=> REST

Representational State Transfer(REST)
- no procedure
- state transfer
- provides api

HTTP Verbs
- get
- post
- put
- patch
- delete

Rails provides a hidden fields to access the REST Verbs that are not supported by HTML

<form method="post" action="123">
  <input type="hidden" name="_method" value="patch">
  ...
</form>

=> ACTIVE RECORD

Active Record is the M of MVC
Active Record facilitates the creation and use of objects stored to a database
Object Relational Mapping, ORM, allows you to make use of rails syntax to store and retrieve data from database without writing SQL statements

Active record provides 
- models
- associations
- database operation
- validate models

Converntion over configuration
- explicit configuration would be needed only in those cases where you can't follow the standard convention.

-> Naming convention
Database Table - Plural with underscores separating words (e.g., book_clubs).
Model Class - Singular with the first letter of each word capitalized (e.g., BookClub).
Migration - Create + Pluralize Model Class name => eg. CreateBookClubs 

-> Schema Conventions
Foreign keys - For associations, named as singularized_table_name_id (e.g., item_id, order_id)
Primary keys - default = id

Models 

class A < ApplicationRecord			# Inherits from ApplicationRecord < ActiveRecord::Base
	self.table_name = 'admin_users' 	# To configure a differnet table in Model.rb
	self.primary_key = "product_id"		# To override the primary key
end

-> Find

 s = Subject.find(1)
 s = Subject.find_by_id(1)
 s = Subject.find_by(id: 1)

 s = Subject.find_by(name: 'Sub1')
 s = Subject.find_by_name('Sub1')

-> Update

 s.update(name:'Subject 1',visible:false) 
 
 s.update_attributes(name:'Sub1',visible:true)

 s.name = 'Sub1' 
 s.save

* Update many records at once

 Subject.update_all "visible = 'true'"

Hash conventions
	s.update(:name => 'dsd')
	s.update(name: 'dsd') -- v5+

=> Validations

class User < ApplicationRecord
  validates :name, presence: true
end
 
user = User.new
user.save  # => false
user.save! # => ActiveRecord::RecordInvalid: Validation failed: Name can't be blank

=> Migrations

Managing a schema using rake

Reference foriegn key as-
	Subject = table_name
      t.integer 'subject_id'
      # same as : t.references :subject

rails db:migrate
rails db:rollback

Each migration modifies it to add or remove tables, columns, or entries

The timestamps macro adds two columns, created_at and updated_at. These special columns are automatically managed by Active Record if they exist.

Generating migrations:
- column_name:type
rails generate migration CreateProducts name:string part_number:string
- index
rails generate migration AddPartNumberToProducts part_number:string:index
- foriegn key
rails generate migration AddUserRefToProducts user:references		# This migration will create a user_id column and appropriate index.
- JoinTable
rails g migration CreateJoinTableCustomerProduct customer product

-> Model Generators
Model will automatically generate migrations
- rails generate model Product name:string description:text

-> Passing modifiers
Column Modifiers
Column modifiers can be applied when creating or changing a column:

- limit Sets the maximum size of the string/text/binary/integer fields.
- precision Defines the precision for the decimal fields, representing the total number of digits in the number.
- scale Defines the scale for the decimal fields, representing the number of digits after the decimal point.
- polymorphic Adds a type column for belongs_to associations.
- null Allows or disallows NULL values in the column.
- default Allows to set a default value on the column. Note that if you are using a dynamic value (such as a date), the default will only be calculated the first time
- index Adds an index for the column.
- comment Adds a comment for the column.

rails generate migration AddDetailsToProducts 'price:decimal{5,2}' supplier:references{polymorphic}

class AddDetailsToProducts < ActiveRecord::Migration[5.0]
  def change
    add_column :products, :price, :decimal, precision: 5, scale: 2
    add_reference :products, :supplier, polymorphic: true
  end
end

-> Foreign key
add_foreign_key :articles, :authors

-> Reverting Previous Migrations
You can use Active Record's ability to rollback migrations using the revert method:

require_relative '20121212123456_example_migration'
 
class FixupExampleMigration < ActiveRecord::Migration[5.0]
  def change
    revert ExampleMigration
 
    create_table(:apples) do |t|
      t.string :variety
    end
  end
end

-> Rollback
rails db:rollback
rollback latest migrations

rails db:rollback STEP=3
will revert the last 3 migrations

The db:migrate:redo task is a shortcut for doing a rollback and then migrating back up again
rails db:migrate:redo STEP=3

The rails db:setup task will create the database, load the schema and initialize it with the seed data

db:reset task will drop the database and set it up again. This is functionally equivalent to rails db:drop db:setup


rails db:migrate:up VERSION=20080906120000
rails db:migrate:down VERSION=20080906120000

-> different environment: bin/rails db:migrate RAILS_ENV=test

validates :foreign_key, uniqueness: true

-> To add initial data after a database is created, Rails has a built-in 'seeds' feature
just fill up db/seeds.rb with some Ruby code, and run rails db:seed:

5.times do |i|
  Product.create(name: "Product ##{i}", description: "A product.")
end

Rails supports six types of associations:

belongs_to
has_one
has_many
has_many :through
has_one :through
has_and_belongs_to_many


A one-to-one relationship between two models, you'll need to add belongs_to to one, and has_one to the other.The distinction is in where you place the foreign key (it goes on the table for the class declaring the belongs_to association)

Rails offers two different ways to declare a many-to-many relationship between models. The simpler way is to use has_and_belongs_to_many, which allows you to make the association directly
The second way to declare a many-to-many relationship is to use has_many :through. This makes the association indirectly, through a join model
Set up a has_many :through relationship if you need to work with the relationship model as an independent entity. If you don't need to do anything with the relationship model, it may be simpler to set up a has_and_belongs_to_many relationship
You should use has_many :through if you need validations, callbacks or extra attributes on the join model

-> Polymorphic associations
With polymorphic associations, a model can belong to more than one other model, on a single association

-> Self Joins
In designing a data model, you will sometimes find a model that should have a relation to itself. For example, you may want to store all employees in a single database model, but be able to trace relationships such as between manager and subordinates. This situation can be modeled with self-joining associations:

class Employee < ApplicationRecord
  has_many :subordinates, class_name: "Employee",
                          foreign_key: "manager_id"
 
  belongs_to :manager, class_name: "Employee"
end


-> Caching

author.books                 # retrieves books from the database
author.books.size            # uses the cached copy of books
author.books.reload.empty?   # discards the cached copy of books
                             # and goes back to the database

-> Scopes for belongs_to

where
includes
readonly
select

The where method lets you specify the conditions that the associated object must meet.
class book < ApplicationRecord
  belongs_to :author, -> { where active: true }
end

-> ssociation Callbacks
Normal callbacks hook into the life cycle of Active Record objects, allowing you to work with those objects at various points. For example, you can use a :before_save callback to cause something to happen just before an object is saved.

Association callbacks are similar to normal callbacks, but they are triggered by events in the life cycle of a collection. There are four available association callbacks:

before_add
after_add
before_remove
after_remove
You define association callbacks by adding options to the association declaration. For example:

class Author < ApplicationRecord
  has_many :books, before_add: :check_credit_limit
 
  def check_credit_limit(book)
    ...
  end
end

You can stack callbacks on a single event by passing them as an array:

class Author < ApplicationRecord
  has_many :books,
    before_add: [:check_credit_limit, :calculate_shipping_charges]

-> Single Table Inheritance

rails generate model car --parent=Vehicle

class Car < Vehicle
end

Car.all

-> belongs_to, has_one

association
build_association
create_association

belongs_to association supports these options:

:autosave
:class_name
:counter_cache
:dependent
:foreign_key
:primary_key
:inverse_of
:polymorphic
:touch
:validate
:optional

-> has_many, habtm

collection
collection<<(object, ...)
collection.delete(object, ...)
collection.destroy(object, ...)
collection=(objects)
collection_singular_ids
collection_singular_ids=(ids)
collection.clear
collection.empty?
collection.size
collection.find(...)
collection.where(...)
collection.exists?(...)
collection.build(attributes = {}, ...)
collection.create(attributes = {})
collection.create!(attributes = {})



-> has_one, has_many options

The has_many association supports these options:

:as
:autosave
:class_name
:counter_cache
:dependent
:foreign_key
:inverse_of
:primary_key
:source
:source_type
:through
:validate


=> Validations

p.new_record?
=> true			# insert sql
=> flase		# update sql

create		=> false
create!		=> triggers error
save
save!
update
update!


Valid and Invalid?

class Person < ApplicationRecord
  validates :name, presence: true
end
 
Person.create(name: "John Doe").valid? # => true
Person.create(name: nil).valid? # => false


class Person < ApplicationRecord
  validates :name, presence: true
end
 
>> p = Person.new
# => #<Person id: nil, name: nil>
>> p.errors.messages
# => {}
 
>> p.valid?
# => false
>> p.errors.messages
# => {name:["can't be blank"]}
 
>> p = Person.create
# => #<Person id: nil, name: nil>
>> p.errors.messages
# => {name:["can't be blank"]}
 
>> p.save
# => false
 
>> p.save!
# => ActiveRecord::RecordInvalid: Validation failed: Name can't be blank
 
>> Person.create!
# => ActiveRecord::RecordInvalid: Validation failed: Name can't be blank

- acceptance
- associated
- confirmation
- exclusion
- format
- inclusion
- length
- numericality
- presence
- absence
- uniquenes

- validates_each
- validates_with

- allow_nil
- allow_balnk


-> Strict validations

validates :name, presence: { strict: true }

- errors.clear
- errors.size


<% if @article.errors.any? %>
  <div id="error_explanation">
    <h2><%= pluralize(@article.errors.count, "error") %> prohibited this article from being saved:</h2>
 
    <ul>
    <% @article.errors.full_messages.each do |msg| %>
      <li><%= msg %></li>
    <% end %>
    </ul>
  </div>
<% end %>

=> Form helpers

text_field, password_field, text_area, hidden_field, label, radio_button, check_box, file_field
