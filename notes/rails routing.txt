www.facebook.com/profiles/123/post/4

what is routing?
A request url that allows a user to access a unique page.

How routing in MVC work?
When interacting with our application, a browser sends a request, which is received by a web server and passed on to the Rails routing engine. The router receives the request and redirects to the appropriate controller class method based on the routing URL pattern.
The controller then takes over. In some cases, the controller will immediately render a view for the browser. More commonly for dynamic sites, the controller interacts with a model.
After invoking the model, the controller then renders the final view (HTML, CSS, and images) and returns the complete web page to the user's browser.

rails - Convention over configuration

What are HTTP RESTful APIS?
Along with it rails offers us with a solution of http RESTful apis
get, post, put, patch, delete

Browsers request pages from Rails by making a request for a URL using a specific HTTP method, such as GET, POST, PATCH, PUT and DELETE. Each method is a request to perform an operation on the resource. A resource route maps a number of related requests to actions in a single controller.

what will this do?
GET /patients/17
it asks the router to match it to a controller action
first, it is interpreted as -> get '/patients/:id' which is mapped to any controller that you define in routes, lets say we have controller defined for it as -
'patients#show', patients <- controller, show <- action

Listing Existing Routes
To get a complete list of the available routes in your application, visit http://localhost:3000/rails/info/routes in your browser while your server is running in the development environment. You can also execute the rails routes command in your terminal to produce the same output.

Both methods will list all of your routes, in the same order that they appear in config/routes.rb. For each route, you'll see:

The route name (if any)
The HTTP verb used (if the route doesn't respond to all verbs)
The URL pattern to match
The routing parameters for the route

In Rails, a resourceful route provides a mapping between HTTP verbs and URLs to controller actions.
resources :photos
=>
CONTROLLER#ACTION	HTTP VERB	PATH			NAMED HELPER
photos#index		get		/photos			photos_path
photos#new		get		/photos/new		new_photo_path
photos#create		post		/photos			photos_path
photos#show		get		/photos/:id/		photo_path(id)
photos#edit		get		/photos/:id/edit	edit_photo_path(id)
photos#update		patch/put	/photos/id		photo_path(id)
photos#destroy		delete		/photos/:id		photo_path(id)

photos_path	get-> index,	post-> create
new_photo_path	get-> new
edit_photo_path	get-> edit
photo_path	get-> show
		patch-> update
		put-> update
		delete-> destroy
4 urls => 7 actions

difference between put and patch. Put is considered as an entire entity. the complete record is updated. Since we used PUT, but only supplied email, now that's the only thing in this entity. This has resulted in data loss. while in put the data is updated only with necessary attributes

define multiple resources at same time
resources :photos, :books, :videos
OR
resources :photos
resources :books
resources :videos

changing path to different controller::

get 'photos', to: 'users#show'
get 'photos', to: :show, controller: 'users'

default path
get (:controller/(:action/(:id/(.format)))), to => "controller#action"

Singular Resources::

However, you can change the default route path as well, for eg. you wanna change the path of show from photo/id/show to photo

resource :geocoder (instead of resource :geocoders)
HTTP Verb	Path		Controller#Action	Used for
GET		/geocoder/new	geocoders#new		return an HTML form for creating the geocoder
POST		/geocoder	geocoders#create	create the new geocoder
GET		/geocoder	geocoders#show		display the one and only geocoder resource
GET		/geocoder/edit	geocoders#edit		return an HTML form for editing the geocoder
PATCH/PUT	/geocoder	geocoders#update	update the one and only geocoder resource
DELETE		/geocoder	geocoders#destroy	delete the geocoder resource

produces 6 different path (except which one? index)

Defining a singular resource in your routes will not generate a route to an index action by design. The singular resource implies you're always going to lookup this resource without specifying an ID and consequently a get to index for a singular resource just doesn't make logical sense. So, a GET to your url "/user" will route to a show action for that singular resource and not an index.

singular resources map to plural controllers

A singular resourceful route generates these helpers:
- new_geocoder_path returns /geocoder/new
- edit_geocoder_path returns /geocoder/edit
- geocoder_path returns /geocoder

Controller Namespaces and Routing ::

you might group a number of administrative controllers under an Admin:: namespace.
namespace :admin do
  resources :articles, :comments
end

HTTP Verb	Path					Controller#Action	Named Helper
GET		/admin/articles				admin/articles#index	admin_articles_path
GET		/admin/articles/new			admin/articles#new	new_admin_article_path
POST		/admin/articles				Aadmin/articles#create	admin_articles_path
GET		/admin/articles/:id			admin/articles#show	admin_article_path(:id)
GET		/admin/articles/:id/edit		admin/articles#edit	edit_admin_article_path(:id)
PATCH/PUT	/admin/articles/:id			admin/articles#update	admin_article_path(:id)
DELETE		/admin/articles/:id			admin/articles#destroy	admin_article_path(:id)

If you want to route /articles (without the prefix /admin) to Admin::ArticlesController, you could use:
scope module: 'admin' do
  resources :articles, :comments
end

or, for a single case:
resources :articles, module: 'admin'

Nested routes ::

class Magazine < ApplicationRecord
  has_many :ads
end

class Ad < ApplicationRecord
  belongs_to :magazine
end

resources :magazines do
  resources :ads
end

HTTP Verb	Path	Controller#Action		Used for
GET		/magazines/:magazine_id/ads		ads#index	display a list of all ads for a specific magazine
GET		/magazines/:magazine_id/ads/new		ads#new		return an HTML form for creating a new ad belonging to a specific magazine
POST		/magazines/:magazine_id/ads		ads#create	create a new ad belonging to a specific magazine
GET		/magazines/:magazine_id/ads/:id		ads#show	display a specific ad belonging to a specific magazine
GET		/magazines/:magazine_id/ads/:id/edit	ads#edit	return an HTML form for editing an ad belonging to a specific magazine
PATCH/PUT	/magazines/:magazine_id/ads/:id		ads#update	update a specific ad belonging to a specific magazine
DELETE		/magazines/:magazine_id/ads/:id		ads#destroy	delete a specific ad belonging to a specific magazine

This will also create routing helpers such as magazine_ads_url and edit_magazine_ad_path. These helpers take an instance of Magazine as the first parameter (magazine_ads_url(@magazine)).
You can nest resources within other nested resources if you like. For example:

resources :publishers do
  resources :magazines do
    resources :photos
  end
end
/publishers/1/magazines/2/photos/3

this is deep nesting, avoiding it to limit complexity, we use shallow nesting

shallow nesting only allows index, new, create

resources :articles do
  resources :comments, only: [:index, :new, :create]
end
resources :comments, only: [:show, :edit, :update, :destroy]

This idea strikes a balance between descriptive routes and deep nesting. There exists shorthand syntax to achieve just that, via the :shallow option:
resources :articles do
  resources :comments, shallow: true
end

resources :articles, shallow: true do
  resources :comments
  resources :quotes
  resources :drafts
end

In addition to using the routing helpers, Rails can also create paths and URLs from an array of parameters. For example, suppose you have this set of routes:

resources :magazines do
  resources :ads
end

 instead of the numeric IDs:
<%= link_to 'Ad details', magazine_ad_path(@magazine, @ad) %>


<%= link_to 'Ad details', url_for([@magazine, @ad]) %>
<%= link_to 'Ad details', [@magazine, @ad] %>
<%= link_to 'Magazine details', @magazine %>
<%= link_to 'Edit Ad', [:edit, @magazine, @ad] %>

Adding More RESTful Actions

Adding Member Routes

resources :photos do
  member do
    get 'preview'
  end
end
OR
resources :photos do
  get 'preview', on: :member
end

/photos/1/preview with GET

preview_photo_url(:id)

Adding Collection Routes

resources :photos do
  collection do
    get 'search'
  end
end

resources :photos do
  get 'search', on: :collection
end

/photos/search with GET

search_photos_url

=> Naming routes

get 'exit', to: 'sessions#destroy', as: :logout

This will create logout_path and logout_url as named helpers in your application. Calling logout_path will return /exit

=> Redirection
You can redirect any path to another path using the redirect helper in your router:

get '/stories', to: redirect('/articles')
You can also reuse dynamic segments from the match in the path to redirect to:

get '/stories/:name', to: redirect('/articles/%{name}')

=> Root

You can specify what Rails should route '/' to with the root method:

root to: 'pages#main'
root 'pages#main' # shortcut for the above

You can also use root inside namespaces and scopes as well. For example:

namespace :admin do
  root to: "admin#index"
end

root to: "home#index"

=> Customizing Resourceful Routes

The :controller option lets you explicitly specify a controller to use for the resource. For example:

resources :photos, controller: 'images'
will recognize incoming paths beginning with /photos but route to the Images controller:

HTTP Verb	Path			Controller#Action	Named Helper
GET		/photos			images#index		photos_path
GET		/photos/new		images#new		new_photo_path
POST		/photos			images#create		photos_path
GET		/photos/:id		images#show		photo_path(:id)
GET		/photos/:id/edit	images#edit		edit_photo_path(:id)
PATCH/PUT	/photos/:id		images#update		photo_path(:id)
DELETE		/photos/:id		images#destroy		photo_path(:id)


Overriding the Named Helpers
The :as option lets you override the normal naming for the named route helpers. For example:

resources :photos, as: 'images'

HTTP Verb	Path			Controller#Action	Named Helper
GET		/photos			photos#index		images_path
GET		/photos/new		photos#new		new_image_path
POST		/photos			photos#create		images_path
GET		/photos/:id		photos#show		image_path(:id)
GET		/photos/:id/edit	photos#edit		edit_image_path(:id)
PATCH/PUT	/photos/:id		photos#update		image_path(:id)
DELETE		/photos/:id		photos#destroy		image_path(:id)

=> Overriding the new and edit Segments
The :path_names option lets you override the automatically-generated new and edit segments in paths:

resources :photos, path_names: { new: 'make', edit: 'change' }
This would cause the routing to recognize paths such as:
/photos/make
/photos/1/change

=> Using :as in Nested Resources
The :as option overrides the automatically-generated name for the resource in nested route helpers. For example:

resources :magazines do
  resources :ads, as: 'special_ads'
end
This will create routing helpers such as magazine_special_ads_url and edit_magazine_special_ad_path.

=> Testing Routes

- The assert_generates Assertion
assert_generates asserts that a particular set of options generate a particular path and can be used with default routes or custom routes. For example:
assert_generates '/photos/1', { controller: 'photos', action: 'show', id: '1' }
assert_generates '/about', controller: 'pages', action: 'about'

- The assert_recognizes Assertion
assert_recognizes is the inverse of assert_generates. It asserts that a given path is recognized and routes it to a particular spot in your application. For example:
assert_recognizes({ controller: 'photos', action: 'show', id: '1' }, '/photos/1')

- The assert_routing Assertion
The assert_routing assertion checks the route both ways: it tests that the path generates the options, and that the options generate the path. Thus, it combines the functions of assert_generates and assert_recognizes:
assert_routing({ path: 'photos', method: :post }, { controller: 'photos', action: 'create' })
