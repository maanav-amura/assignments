1.

class Calculator
  def add(a, b)
    a+b
  end

  def subtract(a, b)
     a-b
  end
end

2. Return length of all elements in an array as an array

def length_finder(input_array)
  length_array = []
  input_array.each do |input|
    length_array << input.length
  end
  length_array
end

OR 

def length_finder(input_array)
  input_array.map {|element| element.length}
end

3. Find word occurrence

def find_frequency(sentence, word)
  sentence.downcase.split(' ').count(word.downcase)
end

OR

def find_frequency(sentence, word)
  sentence.downcase.split.count(word.downcase)
end

4. accepts a String and rearranges all the words in ascending order, by length.

def sort_string(string)
  string.split.sort {|a,b| a.length<=>b.length}.join(' ')
end

def sort_string(string)
  string.split(' ').sort{|x, y| x.length <=> y.length}.join(' ')
end

5. : Given an array [1, 2, 3, 4, 5] and 2 should return two random numbers from the given array. 

def random_select(array, n)
  r=[]
  n.times  { r << array[rand(array.length)] }
  r
end

def random_select(array, n)
  result = []
  n.times do 
    result << array[rand(array.length)]
  end
  result
end

6. Given a candidate, you need an expression that will tell you whether they fit into certain types.

is_an_experienced_programmer = (candidate.years_of_experience>2 || candidate.github_points > 500) 
 && candidate.languages_worked_with.include?('Ruby') 
&& !(candidate.applied_recently? || candidate.age<15) 

is_an_experienced_ruby_programmer =
  (candidate.languages_worked_with.include? 'Ruby') &&
  (candidate.years_of_experience >= 2 || candidate.github_points >= 500) &&
  ! (candidate.age < 15 || candidate.applied_recently?)

7. You are supposed to write a method palindrome? to accomplish this task.

def palindrome?(sentence)
  sentence.downcase.gsub(/\s+/, "")==sentence.downcase.gsub(" ", "").reverse
end

def palindrome?(sentence)
  downcase_stripped_sentence = sentence.downcase.gsub(" ", "")
  downcase_stripped_sentence  ==  downcase_stripped_sentence.reverse
end

8. Calculate cube addition

def sum_of_cubes(a, b)
  sum = 0
  a.upto(b) do |i|
    sum += (i*i*i)
  end
  return sum
end

OR 

def sum_of_cubes(a, b)
  (a..b).inject(0) { |sum, x| sum += (x*x*x) }
end

9. non_duplicated_values to accomplish this task.

Example: Given [1,2,2,3,3,4,5], the method should return [1,4,5]

def non_duplicated_values(values)
  array =[] 
  values.each {|v|  array << v if values.count(v)==1 }
  array
end

def non_duplicated_values(values)
  values.find_all { |x| values.count(x) == 1 }
end

10.  You need to write array_of_fixnums? method to accomplish this task.

Example:
Given [1,2,3], the method should return tru

def array_of_fixnums?(array)
  flag = true
  array.each {|x| flag = false if x.class!=Fixnum}
  flag
end

def array_of_fixnums?(array)
  array.all? {|x| x.class==Fixnum}
end

def array_of_fixnums?(array)
  array.all? { |x| x.is_a? Fixnum }
end

11. roblem Statement


9 is a Kaprekar number since
9 ^ 2 = 81 and 8 + 1 = 9

297 is also Kaprekar number since
297 ^ 2 = 88209 and 88 + 209 = 297.

In short, for a Kaprekar number k with n-digits, if you square it and add the right n digits to the left n or n-1 digits, the resultant sum is k.

Find if a given number is a Kaprekar number.

Their O/P =>

def kaprekar?(k)

  no_of_digits = k.to_s.size

  square = (k ** 2).to_s

  

  second_half = square[-no_of_digits..-1]

  first_half = square.size.even? ? square[0..no_of_digits-1] : square[0..no_of_digits-2]

  

  k == first_half.to_i + second_half.to_i

end

 

 
12. Colors

class Color
  attr_reader :r, :g, :b
  def initialize(r, g, b)
    @r = r
    @g = g
    @b = b
  end

  def brightness_index
    (299*r + 587*g + 114*b) / 1000
  end

  def brightness_difference(another_color)
    (brightness_index - another_color.brightness_index).abs
  end

  def hue_difference(another_color)
    (@r-another_color.r).abs+(@g-another_color.g).abs+(@b-another_color.b).abs
  end

  def enough_contrast?(another_color)
    (brightness_difference(another_color)>125 && hue_difference(another_color)>500)
  end
end


OR

class Color
  attr_reader :r, :g, :b
  def initialize(r, g, b)
    @r = r
    @g = g
    @b = b
  end

  def brightness_index
    (r*299 + g*587 + b*114) / 1000
  end

  def brightness_difference(another_color)
    (brightness_index - another_color.brightness_index).abs
  end

  def hue_difference(another_color)
    (r-another_color.r).abs +
    (g-another_color.g).abs +
    (b-another_color.b).abs
  end

  def enough_contrast?(another_color)
    brightness_difference(another_color) > 125 && hue_difference(another_color) > 500
  end
end


13. You are given some code in the form of lambdas.
Measure and return the time taken to execute that code.
You may use Time.now to get the current time. 

def exec_time(proc)
  start =Time.now
  proc.call
  Time.now-start
end

OR

def exec_time(proc)
  begin_time = Time.now
  proc.call
  Time.now - begin_time
end

14.
Given a 3 or 4 digit number with distinct digits, return a sorted array of all the unique numbers that can be formed with those digits.
Example:
Given: 123
Return: [123, 132, 213, 231, 312, 321]

!

OR
def number_shuffle(number)
  no_of_combinations = number.to_s.size == 3 ? 6 : 24
  digits = number.to_s.split(//)
  combinations = []
  combinations << digits.shuffle.join.to_i while combinations.uniq.size!=no_of_combinations
  combinations.uniq.sort
end

15. A restaurant has incoming orders for which you need to compute the costs based on the menu.

You might get multiple orders at times.

Examples:
if the order is {:rice => 1, :noodles => 1}, and the menu is {:rice => 3, :noodles => 2}, then the cost is 5.

If the orders are {:rice => 1, :noodles => 1} and {:rice => 2, :noodles => 2} and the menu is {:rice => 3, :noodles => 2}, then the cost is 15. 

!

class Restaurant
  def initialize(menu)
    @menu = menu
  end

  def cost(*orders)
    orders.inject(0) do |total_cost, order|
      total_cost + order.keys.inject(0) {|cost, key| cost + @menu[key]*order[key] }
    end
  end
end


16. Given a custom class MyArray,
write a 'sum' method that takes a block parameter.
Example:
my_array = MyArray.new([1, 2, 3])
my_array.sum gives 6
my_array.sum(10) gives 16
my_array.sum(0) {|n| n ** 2 } gives 14 



class MyArray
  attr_reader :array

  def initialize(array)
    @array = array
  end

  def sum(initial_value = 0)
    unless block_given?
      initial_value+array.inject(0) {|sum,num| sum+num}
    else
      sum = initial_value
      array.each {|n| sum += yield(n)}
      sum
    end
  end
end

OR

class MyArray
  attr_reader :array

  def initialize(array)
    @array = array
  end

  def sum(initial_value = 0)
    return array.inject(:+) + initial_value unless block_given?
    sum = initial_value
    array.each {|n| sum += yield(n) }
    sum
  end
end
