Datatypes - 
String('maanav',"maanav"), Number(4,7.2), Boolean(true, false)

Default: undefined

End with semicolon

Print -
console.log('bacon','pepper')

Math Operators -
console.log(21+3.5);
console.log(2017-1969);
console.log(65/240);
console.log(65/240*100);

Functions -
Math.random will generate a random number between 0 and 1
Then, Math.floor will round the number down to the nearest whole number
console.log(Math.floor(Math.random()*100));

Comments -  
A single line comment will comment out a single line, and is denoted with two forward slashes // preceding a line of JavaScript code.
A multi-line comment will comment out multiple lines, and is denoted with /* to begin the comment, and */ to end the comment.

String interpolation = When you insert variable into string

Variables use one equals sign = to assign a value to a variable. When you're comparing two variables, make sure to use three ===.

Datatypes- String, Number, Boolean

print using console.log(); and interpolate strings using , (commas) or using + (plus)

Math.random(); -> 0 to 1
Math.random() * 50; -> 0 to 50.99
Math.floor(Math.random() * 50); -> 0 to 50

Comments - //,  /*   */

declare variable - var myName = 'Arya';

const allows to declare a variable constant eg. const pi = 3.16;

To check if two things equal each other, we can use === (three equals in a row).
To check if two things do not equal each other, we can write !== (exclamation with two equals in a row).

Functions -

var orderCount = 0;
function takeOrder(crustType, topping) {
  console.log('Order: '+ crustType +' pizza topped with ' + topping);
 	orderCount = orderCount + 1;
}
function getSubTotal(itemCount) {
  return itemCount * 7.5;
}
function getTax() {
  return getSubTotal(orderCount)*0.06;
}
function getTotal() {
  return getSubTotal(orderCount) + getTax();
}
takeOrder('thin crust','bacon');
takeOrder('cheese crust','bacon');
takeOrder('mac crust','bacon');
console.log(getTotal());

Scope - 

var laundryRoom = 'Basement';
var mailRoom = 'Room 1A';
function myApartment() {
  var mailBoxNumber = 'Box 3';
  laundryRoom = 'In-Unit';
  console.log('Mail box: ' + mailBoxNumber + ', Laundry:' + laundryRoom);
}
console.log('Laundry: ' + laundryRoom +  ', Mail: ' + mailRoom);
myApartment();

Arrays -

Check out how push() works here:

It connects to bucketList with a period.
Then we call it like a function. That's because push() is a function and one that JavaScript allows us to use right on an array.
pop() is similar to push(), except that it deletes the last item of an array. 

var bucketList = ['one','two','three'];
console.log(bucketList);
var listItem = bucketList[2];
console.log(bucketList.length);
bucketList.push('four','five');
console.log(bucketList);
bucketList.pop();

Array Methods :: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array

Loops - 

for loops, which let us loop a block of code a known amount of times.
while loops, which let us loop a block of code an unknown amount of times.

var myPlaces = ['Mumbai','Goa','Gujarat'];
var friendPlaces = ['Pune','Goa','Kashmir'];
for(var i=0;i<myPlaces.length;i++) {
  // console.log(myPlaces[i]);
  for(var j=0;j<friendPlaces.length;j++) {
    if(myPlaces[i]===friendPlaces[j]) {
    	console.log(friendPlaces[j]);
    }
  }
}

var cards = ['Diamond', 'Spade', 'Heart', 'Club'];
var currentCard = 'Heart';
while(currentCard!=='Spade') {
  console.log(currentCard);
  var randomNumber = Math.floor(Math.random()*3);
  currentCard = cards[randomNumber];
}
console.log('Found spade!');

DOM -

We can link a JavaScript file to HTML by including it as the src of a <script> tag inside of an HTML file, like this:
<script src='js/main.js'></script>
This line of code will link the file located at js/main.js.

alert('Hello JavaScript!');
Note: alert is a JavaScript function that will create a pop-up window with text inside it. When we link the main.js file to the HTML file, we will see a pop-up window that was generated by this code. alert is not used by JavaScript developers in practice, however it is useful here to demonstrate linking these two files. We will use it over the next few exercises for demonstration purposes.

The Document Object Model, commonly referred to as the DOM', is the term for elements in an HTML file. Elements are any HTML code denoted by HTML tags, like <div>, <a>, or <p>

To get An elements Value ::
var skillset = document.getElementsByClassName('skillset');
alert(skillset);

A great library for interacting with the DOM is jQuery.

jQuery is a library written in JavaScript. The syntax and functions it contains will help us interact with DOM efficiently. 
 Before the closing </body> tag, right above your current <script> tag, include this code:

<script src='https://code.jquery.com/jquery-3.1.0.min.js'></script>

The link to jQuery needs to be above the link to the js/main.js file, which will give main.js access to the jQuery library.

After the main function, write this code:

$(document).ready(main);
Notice that we put main inside the parentheses of ready. main here is a callback, which means that our code will wait until the document (in other words, the DOM) is loaded, or ready. When it is, then it will execute the main function. jQuery calls back to the main function, therefore it's a callback.

document.getElementsByClassName('skillset');
With jQuery we can select the same element with:
$('.skillset');
We can wrap any CSS selector, like class, id, or tag, with $('.example-class') to select it with jQuery.
The selectors jQuery uses are the exact same as CSS selectors. For instance, if there's an element with a class of supporting-text, you could select it with $('.supporting-text'). Another example, if an element had an id of 'header', you could select it with $('#header').

The hide function will add the CSS property display: none to the DOM element from the page, which will hide it.
fadeIn will fade an element in over a period of time in milliseconds.
 jQuery can do this with an event listener function named on('click').

This function will wait for a click event, and when one occurs, it will execute a provided function. The syntax looks like this:

$('.example-class').on('click', function() {
  // execute the code here when .example-class is clicked.
});
.show will change the CSS attribute display: none to a visible display property, therefore showing the element.
.toggle will hide or show an element, each time it is triggered. 
$('.example-class').toggleClass('active')
.toggleClass is a function that will toggle a CSS class on the jQuery selector it's connected to. If the element has the class applied to it, toggleClass will remove it, and if the element does not have the class, it will add it.
'active' is the class that we will toggle on and off. Notice that toggleClass does not require us to include the period before 'active' since it's already expecting a CSS class.
In css/styles.css, there is this class:
.active {
  background-color: #333333;
  color: whitesmoke;
}

$(this) selects the clicked element. If there are multiple elements with a class of .example-class, this will only toggle the class of the one that is clicked on.

function main() {
	$('.skillset').hide();
  $('.skillset').fadeIn(5000);
  $('.projects-button').on('click', function() {
    $('.projects').toggle();
    $(this).toggleClass('active');
  });
}

$(document).ready(main);

Query has a function named next to help us select elements that are next to another element. If we have this in our HTML:

<div class='item-one'> ... </div>
<div class='item-two'> ... </div>
If we wanted to hide item-two, we could write:

$('.item-one').next().hide();
We can attach next to any jQuery selector to select the next direct element.
Then, we can attach any jQuery function to next(). In this case, we attached hide, which would hide the next element after the $('.item-one') element.

We can change the text of an element with the jQuery function text. It's syntax looks like this:

$('.my-selector').text('Hello world!');
text attaches directly to a jQuery selector.
Inside of text's parentheses, we can provide text that will become the text of our DOM element. The text we supply will replace any existing text, and if the element has no pre-existing text, text will add it.

jQuery provides a method named slideToggle that can animate an element's entrance and exit. The syntax looks like this:

$('.example-class').slideToggle(400);

function main() {
	$('.skillset').hide();
  $('.skillset').fadeIn(5000);
  $('.projects-button').on('click', function() {
    // $(this).next().toggle();
    $(this).next().slideToggle(400);
    $(this).toggleClass('active');
    $(this).text('Projects Viewed');
    
  });
}

$(document).ready(main);


A great library for interacting with the DOM is jQuery.

Jquery functionalities:

function main() {
  var $skillset = $('.skillset'); // jquery selector
  alert($skillset);
  $skillset.hide(); // hides the selector
  $('.skillset').fadeIn(1000); // millisecond and loading page in faded animation
  $('.projects').hide(); // hides the class
  $('.projects-button').on('click', function() {
    // $('.projects').show(); // shows the class
    // $('.projects').toggle(); // toggles showing and hiding of a class
    $(this).next().toggle(); // select the next element from current element and toggle it
    // $('.projects-button').toggleClass('active'); // active is a class in css which is toggled (removed or added) by toggleClass
    $(this).toggleClass('active'); // toggle class using this
    $(this).text('Projects Viewed'); // turns the text of button when clicked
  });
}

$(document).ready(main);

.toggleClass is a function that will toggle a CSS class on the jQuery selector it's connected to. If the element has the class applied to it, toggleClass will remove it, and if the element does not have the class, it will add it.

$(this) selects the clicked element. If there are multiple elements with a class of .example-class, this will only toggle the class of the one that is clicked on.

Then, we can attach any jQuery function to next(). In this case, we attached hide, which would hide the next element after the $('.item-one') element.
slideToggle can be called directly on a jQuery selector.
slideToggle also takes a parameter of milliseconds that the animation should last. The default is 400 milliseconds, or 0.4 seconds.
function main() {
  $('.skillset').hide();
  $('.skillset').fadeIn(1000);
  $('.projects').hide();  
  $('.projects-button').on('click', function() {
    $(this).next().slideToggle(400);
    $(this).toggleClass('active');
    $(this).text('Projects Viewed');
  });
}
$(document).ready(main);

On click ->
$('.example-class').on('click', function() {
  // execute the code here when .example-class is clicked.
});


Summary ::

There are three essential data types in JavaScript: strings, numbers, and booleans.
We can write out anything to the console with console.log.
We can do math with operators like +, -, *, and /.
We can find the remainder after dividing two numbers with a modulus: %.
We can generate a random number with Math.random, then make it a whole number with Math.floor.
We write a single line comment with // and a multi-line comment with /* and */.

How to create variables.
How to change a variable's value.
How to interpolate, or insert, a variable into a string.

if/else statements make binary decisions and execute separate code based on a condition.
We can add extra conditions with to if/else statements with else if conditions.
switch statements make complicated if/else statements easier to read, however they achieve the same result as if/else statements.
Comparison operators, like <, >, <=, and >= can compare two variables. After they compare, they always return either true or false.
Logical Operators, like &&, ||, !==, and !, can compare two variables to see if a certain condition exists:
&& checks if both sides are true.
|| checks if either side is true.
!== checks if both sides are not equal.
! changes a variable that is true to false, and vice versa.

Functions are written to perform a task.
Functions take data or variables, perform a set of tasks on them, and then return the result.
We can define parameters when calling the function.
When calling a function, we can pass in arguments, which will set the function's parameters.
We can use return to return the result of a function which allows us to call functions anywhere, even inside other functions.

Scope is the idea in programming that some variables are acessible/inaccessible from other parts of the program.
Global Scope refers to variables that are accessible to every part of the program.
Functional Scope refers to variables created inside functions, which are not accessible outside of its block.

Arrays are lists and are a way to store data in JavaScript. Each item inside of an array is at a numbered position. Arrays are created with brackets [].
We can access one item in an array using it's numbered position, with syntax like: myArray[0].
Arrays have a length property, which allows you to see how many items are in an array.
Arrays also have their own methods, including push and pop, which add and subtract items from an array, respectively.

for loops allow us to repeat a block of code a known amount of times.
We can use a for loop inside another for loop to compare two lists.
while loops are for looping over a code block an unknown amount of times.

How to link a JavaScript file to an HTML file using a <script> tag.
jQuery is a library to help JavaScript interact with HTML elements.
We can make sure our page is ready to go with $(document).ready(). Then, we can pass in a function to ready that will execute when the page is loaded.
jQuery uses the same selector names as CSS.
We can hide elements with hide, and show them with show.
We can make elements appear with fadeIn.
on('click') functions allow us to make HTML elements clickable. When an element is clicked, the click function will execute the function we provide. It's full sytnax looks like:
$('.example-class').on('click', function() {
  // Execute when .example-class is clicked
});
toggle will toggle an element on and off the page.
$(this) will select the specific element that was clicked if placed inside a click function.
toggleClass can toggle a class on and off.
We can select elements next to each other with next.
text will replace a DOM element's text with text we specify.
slideToggle will make an element slide into and out of the page with an animation.
